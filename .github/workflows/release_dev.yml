name: Release-Development
on:
  workflow_dispatch:
    inputs:
      compiler:
        type: choice
        description: What compiler to use?
        required: true
        default: YYC
        options:
          - YYC
          - VM

jobs:
  build_needed:
    name: Build needed?
    runs-on: ubuntu-latest
    outputs:
      needed: ${{ steps.commit_check.outputs.needed }}  # Output for skipping
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Check commit
        id: commit_check
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Merge commit message: $COMMIT_MESSAGE"

          EXCLUDE_PATTERN="^(docs|chore|style|ci)"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manually triggered, forcing build."
            echo "needed=true" >> $GITHUB_OUTPUT
          elif echo "$COMMIT_MESSAGE" | grep -Eq "$EXCLUDE_PATTERN"; then
            echo "Commit message matches excluded pattern, skipping build."
            echo "needed=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "needed=true" >> $GITHUB_OUTPUT
          fi

  prepare_release:
    name: Prepare the tags
    runs-on: ubuntu-latest
    needs: build_needed
    if: needs.build_needed.outputs.needed == 'true'
    outputs:
      tag_name: ${{ steps.tag_info.outputs.tag_name }}
      build_date: ${{ steps.tag_info.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag name
        id: tag_info
        run: |
          BRANCH_SUFFIX="${GITHUB_REF_NAME##*/}"
          DATE_TAG=$(date -u +"%y-%m-%d-%H%M")
          TAG_NAME="$BRANCH_SUFFIX/$DATE_TAG"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "build_date=$DATE_TAG" >> $GITHUB_OUTPUT

      - name: Cleanup old releases
        run: |
          # tag_name looks like: branch-name/date
          TAG_NAME="${{ steps.tag_info.outputs.tag_name }}"
          BRANCH_SUFFIX="${TAG_NAME%%/*}"
          PREFIX="${BRANCH_SUFFIX}/"
      
          echo "Checking releases with prefix: $PREFIX"
      
          TAGS=$(gh release list --limit 100 | awk '{print $1}' | grep "^${PREFIX}" | sort -r)
      
          COUNT=0
          for TAG in $TAGS; do
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 10 ]; then
              echo "Deleting old release+tag: $TAG"
              gh release delete "$TAG" -y --cleanup-tag
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gamemaker_build:
    name: Build
    uses: ./.github/workflows/gamemaker_build.yml
    secrets: inherit
    needs: prepare_release
    if: needs.build_needed.outputs.needed == 'true'
    with:
      yyc: ${{ github.event.inputs.compiler == 'YYC' }}
      build_date: ${{ needs.prepare_release.outputs.build_date }}

  release:
    name: Release
    runs-on: windows-2022
    needs: gamemaker_build
    if: needs.build_needed.outputs.needed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Download built file artifact
        uses: actions/download-artifact@v4
        with:
          name: built-file
          path: ./build_output

      - name: Debug tag and commit
        run: |
          echo "Tag name: ${{ needs.prepare_release.outputs.tag_name }}"
          echo "Target commitish: ${{ github.ref_name }}"
          git show-ref | grep ${{ needs.prepare_release.outputs.tag_name }} || echo "Tag not found yet"
          git rev-parse ${{ github.ref_name }} || echo "Commit not resolved"

      - id: create_release
        name: Create a release and upload the build
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: ChapterMaster ${{ needs.prepare_release.outputs.tag_name }}
          tag_name: ${{ needs.prepare_release.outputs.tag_name }}
          prerelease: true
          generate_release_notes: true
          make_latest: true
          target_commitish: ${{ github.ref_name }}
          files: |
            ./build_output/${{ needs.gamemaker_build.outputs.built_file }}/*
